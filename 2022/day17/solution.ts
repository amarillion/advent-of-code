#!/usr/bin/env ts-node

import { Point } from '../common/point.js';
import { assert } from '../common/assert.js';
import { SparseGrid } from '../common/sparsegrid.js';

const TEST_INPUT = ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>";
const INPUT = "><<<<>><<><<<<>>>><<><<<>>><<>>>><<<<>>><<<><<<<>>><<<><<<>>>><<<><<<<><>>><>>><<<<><<<>>>><<>>>><<>><<>>><<<<>>><<>><>>><<>>>><<>><<<<><>><<>>>><<<><<<<><<<><><<>>><>><<<>>>><<<><<<<>>>><><<<<>><<<><>><>>><<>>><<<<>>>><<<<><<<<><<<><<><<<<>>>><>><<<<>><<>>><<<>>><><<<>>>><<<>>>><<<>><>><<>><<<>>>><<<<>>>><<<<>><><<<<>>>><><<>>>><<>><<<><<<>><><>>>><>><><<<<>>><<><>><<<>>>><><<><<><>>><<<<>>><>>><<<>>><<<<>><<>>>><>>>><>>>><<<<>>>><<<>>><>>><>>>><<>><<>>>><<<>>><<>>><<>>>><<<<>><<>>><>>><><<>>>><<><>>>><<>>><>><<<>><<>><><<<>>><<<>>>><><>>><<>>><<>>><<<<>>>><>>><<<<>>>><>><<<<>><<<<>>><<>><<>><>>><<<>><<<<>>><<>>>><<>><<<>>><><<>><<><<>><<<<>>>><<<<><>>>><><>>>><<<><><<<><<<<><<><>>>><><<<><<<<>>><>>>><<<<>><>>>><<>><<><><>><<<>>>><<>><<<>>>><<<<>>>><<<><<<>>><<<>><>><<<><<<>><<<<><<<>>><<<><>>><<>>><<<>>>><>><<>>>><<><<<>>><<<>>>><<<<>><<<>><<>><<<><>>><<>>><>>><<>><<>><<<<>>><>>><><<<<><<<<><<>>>><>>>><<>>>><<<<><<<<>><>><<<>>>><<<<>>><<>>>><<<<>>><<>>><<<<><<>>>><><><>>>><<>>>><<><<<>><<<>><<>>>><<>><<><<<<>>>><>><<<>><<<<><<<<>>><<>>><>>><<<<>>>><>><<<>>>><<<<>><>>>><<<>>>><>>><<<<>><<<<>>>><<<<>>><<<>>>><>><>>><<<><><<<>><<<<>>><>><<<>><>>>><<<>>>><<<>>><<<<>>><<<><<<>>><<>>>><<<>>><<<<>><<>>>><<<>><>>>><<>>>><<<<><<<><<>>>><><<<<>>>><<<<><<<<>>><<<>>>><<<<>>>><>><<<<>><<<<>>><><<<>><<<>>><>>>><<<>>><<><><<<<>>><<><<<>><<>>>><<<>><<<<>>><><<<>><<<>>>><<>>><<<>><<<<>>>><>>>><>>>><<<<><<<<>>><<><<>>>><<<<>><><>><<>><<<<>><<<>>>><>>>><<>><<>>><>>>><<<>>>><<<<>><<<>>>><<<<>><<>><<<<>>><<>><>>>><><<<<>>>><<>><<><<><<<>><>>>><<<>>>><<<>>><<<<><<<><>>><<>>><<>><<<>>><>><<<>>><<<>>>><>>><<>>>><<<>>><<><<>>><<>>>><>><<<><<><<<<>>><<<<>><>><<<>>><>><<<<>><<<<>><<>><<<<>>><<<<>>>><<<>>><<<<>>>><<><<>><<<><<<>>>><<<<><<<<>>><>>>><>><<<>>><<><><<>><<<>>>><<<><>>><<<>>><>>>><<><<<>><<<><<<<>><>>><<<>>>><>><<<><><<<>><<>><<<><<<>><<<<>>>><<<<>>><<>>><<<>>><<><<>><<<>>><<>>><<>><<<><>>><>>><<><<><><<>><>><<<><<<<>>><<<>>>><<<<>>>><>><<>>><>><>>>><<<>><<<<>>>><<<<>>><>>>><<<><<<<><<<><<<>>><<>>>><<<>><<<<>>>><<<<>>>><<<><<<<>><>>>><>><<>>>><<<<><<<>>><>>><<>>>><<<><<<<>>><<>><>><<>>><<<>>>><<<>>>><<<>>>><<<<>>><<<<>><><<<><<<>>>><<<>>>><<>><>>><<<><<<>><<<<><<><<><<<<>>><<>>>><<<<>>>><<>>><<<<>>>><<<<>>>><<<<><>><<<>><<><>>>><<<<><<>>>><<><<<>><<<<><<<<>><<>>>><<<>>><<>>>><>><<<<>><<<>><>>><<<<>>>><>>>><<<>><<<<><<>>>><<><>>>><><<>>><<<><<>><<<<><>>>><<<<><><>>>><<<<>>>><>>>><>><<<><>>><><<><<>>><<>>>><<<>>>><<><<<<><<<<><><<<<>>><<<>><<<><<<<>>><>>>><>>><<<><><>>>><>>>><<<>><<<>>>><<<<>>>><<<<><<<<>>>><<<><<><>><>>><>>>><<><<>>>><<<>>><<>>>><<<<>>><<<>>><<<>>><<<>><<>><<><<>>><<>>><<<>>><<<<>>>><>>>><<<>>>><>><>><><<>>><<<>><<<<>>><>><>><<<<>>><>><<>>><<<<>>><>>><>><<<>>>><<<<>>><<>>><>>>><>>>><<><<<<>>><<>><><<<<>><<<<>><<<<>>>><<<<>>>><<<<>>><<<>><<<>>>><<<<>>><>>><>>><>><<<>>><<><<>>><<>>><<<>>><<<<>>><<<>>>><<<>><<>>>><>><<<<>>>><<><<<<>>><<>><<>><>>>><<<>>>><<<>>>><>><<<<><>>><>><<>>><<<>>><<<>><<<>>>><<>>><<<>><<>>>><<<<>><<><<<<>>>><<>>><>>>><<<<><<<<><<><<<>><><<<>>><<<><<<><<<>>><<<<>><<<<>>><<<<>>>><>>><>>>><<<>>><<<<>><<<>>>><<<<>>><<<>><><<>>><<<>>><>>><<>>><<<>><<><<<>>><<>>><<>><<<<><<<>><<<<>>>><<<<>><>>><<<<>><<<><>>>><<>>>><>>><>><<>>>><<<>>>><<>>>><<<<>>><>>><>>><<<<>>>><>>>><>><<>><>><<<>><>><<>>><>>>><<<<>>><>>><<<><<<>>>><><<<>><>>><<<<><<<<><<<<><><<><<><<<><>>>><>><<>>><<<<>>><><<<<>><<<<><<<>>><<<>>>><<>><<<<><><<<>>>><>>><<<<><<<<>>>><>><><<<<>>>><<<<>>><>>><<<>><><<<><<<<>>>><<<<><<<>>><>><<<<>><<<>>>><<>>><<<><>><<>>>><<>>><>>><>>><<>>>><<<<>><>>>><>><<<<>>>><<>><<<>>>><<<<>>>><<>>>><<<>><<<<><<>>><><>>><>><<<<>>><<>><<<>>><<><<<>><<<<>><>>><<<><<>>><<>><<<>>>><<<>><<><<>>><<<><<<<><<<>>><<<><<><>>>><>>>><<<>>>><>><<<><<>>>><><<><<>>>><<<<>><<>>><<<<>>>><>>>><<>><<>><>>><<>><>>>><<<<>><>>><>>><<><>>>><<>><>>><<><><<<>>><>>>><<<>><<<<>>>><<<><<>>><<<<>>>><><<>>><<>><<<>>><<<>>>><>><<<<>>><<>>><>>>><>><<>>>><>>><>>><<>>><>><<<><<><<<<><>>>><<<>>>><>>>><<<<>>>><<<<><<<><<<>>><<<>><<>><<>>><<<>>><<<<>>>><<<>>><<<>>><<<><><<<>>>><>>>><>><<<>><<<>>>><><>>><<<>>>><>>>><<<>><<<<><>>><<<><<<<><<<>>>><<<<>>>><<<>>>><<><<>><>><<<>>><<<>><<<>>>><<<<>>><<<<>>><<<<><<<><<<><<<<>><<><<>>>><<<>>>><><<>><<>>><><<<<>>><<<><<<><<<>>>><<<>>><<<<>>>><<<<>><<<<>>>><><<>>><<><<>>><<><<<<><<<><><<<<><<>>>><>>><<<<>><<<<><<><<<<>>>><<<<>><<<>>>><>>><<<<>>><<<>>>><>>>><<<<>>><<<<>>>><>>><<<<>>><<<><><>>>><>>><<<<>>>><<<<><>><>>><><>><<>>><>>>><<<<><<<>>><<<<>>>><<<<>>>><<<>>><<<>>>><<<>>><<<<>><<><<>>><<<><<><<<<>>><<<<><<>><><<<><>>>><<<<>>>><<<<>>><<<>>><>>>><>><<<><<>>>><<<><<<<>>><<<><<<<>>><<<<>><><<>><<>>><>>><>>><<>>>><<>>>><<>>>><<<<><<<><<<<>>>><<>>>><><<<>><<<<>><<<>><<<>>><>><<>><<<<>>>><<<<>><><<>>>><<<>><<<<>>>><<<><<>>>><<<<>><<>>>><<<<>>>><>>>><>><>>><<<>><<<<>>>><<<>>><<<<><<<<><<><<>><<>><<<><<<<>><<<<><<>>>><<<<><>>>><>>>><>>><<>>>><<>>>><<<>>><<<><<>>>><<<><<<<>><<>>>><<><><<<<><<<><<>>>><<<>>><<<<>><<><<<>><>><<<<><><<<>>>><>><<>>>><<<>>>><<>>>><<<>><>><<>>><<<>>>><<<>>>><<<<>><<>>>><>><<<<>>>><<>><<<<>>><<>>><<><<<>>>><<<<>>><>><<>><<<<>><<<>><>><<>>>><<<>><<>>><<>><<<<>><><<<><<<<>>><<><<<><><<>>><<>><<<<>>><<<>><>><<<<>><<<<><<<<>>>><<<<>>><<>>><>>>><<<<>>><<<><<<<>><>>>><<<>>>><<><>>><<<>>><<<<>>>><<><<<>>>><<>>><<>><<<>><<<>>><<<><><><>><>>>><><>><<<>>>><<<>><<<>>>><<>><<>>><<<>>><<<>><<<<><<<<>>><>><<>><<<<>>>><<>>><<<<>><<<>>>><<<<>><<<<><>>><>>>><<>><<><<<>><<<><<<>><>>>><<<<>><<>>><<>>><<<>>>><>>>><<<<>>><<<><<<<>>><<>>><>><<>><<<>>>><<<<><>><>>><<<<>>>><>>>><<<><>>><<<><<<<>>><<<><<><<<<>><<>><<>>>><<<>>>><<<<>>>><<>><<<<><<<>>><><<<><<<>>><<<>>><><<<>>><<>>><<<<>><<<<>><<>>>><<><<<<>><<<><>>>><<<>>><<<>><<>>>><<<<><<<<>>>><<>>>><>>>><<<>>><<>>>><<<>>>><>>><<<<>>><>>>><>><><<<<>>>><<<>>><><<<><<<>>>><><<>>><<<<>>>><>><<><><<<>>><<<><<<<>>><<>><<<>>>><<<>>><<<<>><<<>><<<><<>>><<<<>>><><<>>><<<>>>><<<<>>>><<<<><<<>><>>>><>>>><<>>><<<>><<<>>>><<>><<>>>><<<><<>><><<><<><<><<<>>><>>>><>><><<<<>><>><>>>><>>><<<<>>>><<<<>>>><>>><<<>><<<<>>><<>>><<<<><<<<>>>><<<<>>>><<><<<>><<>>><<>>><<<>>>><<<<>>>><<<<>>><<>>><<><<<<><<>>>><<><<<<>><<<<>>><<<<>><<<>><<><>>><<>>>><<<<>>><<<<>>>><<<>>><>>><<<<>>>><<<<>>><<><>>><<><<<>><>>>><>>><<<<><<>><<>>>><>>><<<>>>><><<<<>>>><<<<>><<<>><<<><<<<>>><<<<>>><<>><<><<<<>>><><<>>>><<<>><<>><<<<>><<>><<>><<>>><<<<>><<<><<>>><><>>>><<<>>><<<><><<><<<<>>>><<<<>>>><><<<<><>>><<<>>><<<>><<>>>><<>><<<<>>><<><<<<>>>><<<>>>><<<>><<<>>>><>><<>><>><<<>><<><<><<<><<<<>>><>><<<<>><<<>>><<<<>>><<<<>><<<<>><<<<>>><<<<><>><<<><>>>><<>>>><<<<>><<<<>>><<>><>>><>>>><<<>>><>><<<>>><<><<<>>><<>><>>>><>><>><<><>>>><<<>>>><<>>>><<<>>>><<<>>><<<>>><<><<>>>><>>><>><<>>><<<>>><<>><<><<>><<>><<>>>><<>>>><>>><<<>>>><><<<<>><<<>>>><<<><<<<>>><<<<>>>><<>><<<><<<<>>>><><<>>>><>>><<<>>>><<<>>>><<><>><<<>>><<<<>>>><<<<><>>><<<<>><<<<>>><<<<><>>><<<<>><>>>><<<<>>><<>>>><<>>><<<<>>>><>>><><<>>>><<<><>><<<<>>>><<<<>>><<<>>>><<>><<<<>>>><>><<<><>><>>><>>><<>>><<<<>><<<>>>><<<>>><<<>>>><<<<>>><<<<>><<<<>>>><<<>>><>>>><<<>>><<<<><<<<><<>><<<<><<<<>><>><<<<>>>><<>><>>><<<><<>>><<<><<<<>><<<>>>><>>><>><<<>><<<<>>>><<<>>>><<>><>>>><<<<><<>>><<><<>>><>>><<>>><<<<>>><<<<>>><<<<>>><>>><>>>><<<><<<<>><<<>><<>>>><<<<>><<<><<<><>>>><<<>>>><<>>><<>>>><<<><<><<<><<<<>><>>>><<<<>><<><<>>>><<<<>><<<<>>><<<<>><>><<<<>>><>>>><<<<>>>><<>>>><<>>>><>>><<>><>>>><<<<>>><<<<>><>>><<>><<<<><<<>><><<<<>>>><<<<>><>>><<<<>><>>>><<><><<<<>><<<<>>><<<<><><<<>>><<><<<>><<<>>>><>>><>>>><<>>>><<>><<<>>>><>>>><<><<>>>><<><<<<>>>><>>>><<>>><<>>><><<<<>>><<<<>>><<<>><<>><>>>><<><>>><>>><<<<>><<<<>>>><<<>>>><<<<>>>><<<<>>>><<<>><>>>><<<>><<>><>>><>>><<><<<<>>>><<>><<<>>>><<<<><<<<>>>><<<><<<><<<<><<<>>><<<<>>>><<>>>><>><<<<><<>><<<<>>>><<<>>><>>>><<>>>><<<<>>><><>>>><<><>>>><<><<<<><<<><>>>><<><<<>>>><>><<<>>>><<<><>><>>>><<<>>><>>>><<>>>><>>>><<<<><>>>><<><<>><<<<><>>><<<<>>>><<<<><<<<><><<><<<>>><<<<>>>><<<<><<<>><<<<><>><>><<<>><<<<>><<>><<<><<<><<>>><<<<><<>><<<<>>><<>>>><<<<>><<>>>><<<<>>>><<<<>>><<<<><<<>>>><<>>>><<<<>><>>>><<<<><><<><>><<<<><>>>><<<>>><<<>><<<>><<<<>>><<<<>>>><>>>><><<<<>>>><>><>>>><<<>>><<<<><>>>><<>>><<<<><<<>><<<>>><<>>><<<<>>>><<<>>><<<>>>><<>><<>>><<><<<>>><<<<>>><<<>>><<<<>><><>>><<<>><<<<>><<>><><<<<>>><>>>><<<><<<<><<><<<>>><<<>><>>><<<<><<>><<<><<<>>><>><<<<>><>>>><<<>>>><<<><><<>>><>><<>><<<<>><>>>><><<<>>>><<<>><<>>>><<>>>><<>><<<<>><><>>>><<>>>><<<<><>><<><<<<>><<>>>><<<>>><<<>><<<<>><<>>>><>>>><<>>>><<<>>>><<<<><<><<<>>>><<>>>><<<>>><>>>><>><>>>><<<<>><>><><>><<><<<>><<><<<>>><<<<><<<<><<<<>>><<>>>><<<>>><<><>>>><<>>>><<>>><<>>>><<><<<<>><>>>><<<>><<<>>><<<>>>><<>><>>><>><<<>><<<>><<>>><<<><<>><<<<><<<>>>><>>><<<><<<>>>><<<>><>><>>>><>><><<>><<<<>>><<<>><<>><<<>>>><<<<>><<<>><>>>><<<<>>>><>><>><<<<>><<<>>>><<>>><<<<><>>>><<<>>>><<<<><<>>>><<><>><<>>><<<<>><<<<>>><<<<>>>><>>>><<>><<<<>>>><<>>>><<>>><<>>>><<<><<<>>><<>>><<<>><<<>>><<><<<><<<<>>>><<<><<><>>>><<>>><<>>><><<>>><<<<><<<<>>><>><<>>>><<<<>>><<<<><>>>><<<<>>>><>>>><<<>>>><<<<>>>><<<<>>><<<<>><>>><>><<><<<<>>>><>>>><>>>><<<>><>><<<><><<><<<<>><<>>><<<>><<<><<<<><<<>><<<<>><<<<><<>><<<>>><<<<><<>>><>><>>>><<>>>><<<<>>><><<<<>>><>><<<<><<<<>><<<>>><<<<><<><<><<>><<><<>>><>><<<<>>><<<>><<<<>><<<<><<<>>>><>>><><<<>><<><<>><<>>>><<>>><<>>>><<<<>>>><>>>><>>><<>>><<>>>><>>><<><<<<>>><<<>><<<<>><<<>>><<<<>>><<<><<>>>><<<>>>><<<<>><<><>>><<<><<<<>>>><><<>>>><<<>>>><><<>>>><<>>>><<<<>><<<<><<<><<>><>><>><>>><<><>>><<><<>><<<<><<>><<<<>><>><<<<>>><<<<>><<<<>>><<<><>>>><<<>>>><>>>><><>>>><<>><<<<>><>><<<>>>><<>>>><<>>><<<>>>><><>>>><<<>>>><<<<>><<<>><<>>><<><<<>><<<<>>>><<>>>><>>>><<><<>>>><>>>><<<<>><<<<><<>>><><<><<<>>>><><<>><<<>>><>>>><<>>>><><<><<>>><>><>><<<<><<>>>><<<<>><<<<>>><>>>><<<>>><<<<><>>>><<<<>>>><<>>><<>>><<<>><>><<<<><<<<>>>><><<<>><<<<>>>><<><<<>><<<>><<<<>>>><><<><>>>><><<<<>>><<<>>><<>>>><>>>><<<<>><<><<>>>><<<><<<><>>><>>><<>><<<>><><<<<>>><<<<><>>>><<<>><<>><<>><<<>><<<<>>>><<<>><>>>><<>><>><>>><<<>><>><<<<><<<<>>>><<<<>>><<<>>>><<<<>>><<<<>>><<<<>>><<><>>>><<>>>><>>><<>>>><<<>>><<>>><>><<<>>>><>><<>>><<><<>>><<<>>>><<><<><><<<>>><<<>>>><<<>><<<<>><<><<<<>>><>>>><<<<><<>>><<<>>>><<><<<>>><><<>>><<<<><<<>>><>><><<<>>><<<>>>";
const SHAPES = [
	[
		new Point(0, 0), new Point(1, 0), new Point(2, 0), new Point(3,0),
	], [
		new Point(0, 1), new Point(1, 1), new Point(1, 0), new Point(1, 2), new Point(2, 1),
	], [
		new Point(0, 0), new Point(1, 0), new Point(2, 0), new Point(2, 1), new Point(2, 2),
	], [
		new Point(0, 0), new Point(0, 1), new Point(0, 2), new Point(0, 3),
	], [
		new Point(0, 0), new Point(0, 1), new Point(1, 0), new Point(1, 1),
	]
]

function checkInBounds(rockBase: Point, rockIdx: number) {
	const shape = SHAPES[rockIdx];
	return shape.every(point => { const pos = rockBase.plus(point); return pos.x >= 0 && pos.x < 7 && pos.y >= 0 });
}

function checkCollision(rockBase: Point, rockIdx: number, grid: SparseGrid<string>) {
	const shape = SHAPES[rockIdx];
	return shape.some(point => grid.has(rockBase.plus(point)));
}

function solidify(rockBase: Point, rockIdx: number, grid: SparseGrid<string>) {
	const shape = SHAPES[rockIdx];
	return shape.forEach(point => grid.set(rockBase.plus(point), '#'));
}

function valid(rockBase: Point, rockIdx: number, grid: SparseGrid<string>) {
	return !checkCollision(rockBase, rockIdx, grid) && checkInBounds(rockBase, rockIdx);
}

class Solver {
	readonly grid = new SparseGrid<string>();
	private rockIdx = 0;
	private jetIdx = 0;
	private input: string;

	constructor(_input: string) {
		this.input = _input;
	}

	dropSingle() {
		// console.log(`Drop ${i}\n\n`)
		let landed = false;
		const baseY = this.grid.maxY < 0 ? -1 : this.grid.maxY;
		let rockBase = new Point(2, baseY + 4);

		// console.log(`Top: ${baseY}, start: ${rockBase}`);

		while (!landed) {

			// horizontal movement...
			const jet = this.input[this.jetIdx];
			const delta = (jet === '<') ? new Point(-1, 0) : new Point(1, 0);

			let newPos = rockBase.plus(delta);
			if (valid(newPos, this.rockIdx, this.grid)) {
				// console.log(`Horizontal movement ${jet} ok -> ${newPos}`)
				rockBase = newPos;
			}
			else {
				// console.log(`Horizontal movement ${jet} blocked`)
			}

			// vertical movement
			newPos = rockBase.plus(new Point(0, -1));
			if (valid(newPos, this.rockIdx, this.grid)) {
				// console.log(`Vertical movement ok -> ${newPos}`)
				rockBase = newPos;
			}
			else {
				// console.log(`Landed`)
				landed = true;
				solidify(rockBase, this.rockIdx, this.grid);
			}

			this.jetIdx = (this.jetIdx + 1) % this.input.length;
		}
		
		// console.log(grid.toString('', '\n', '.'));
		this.rockIdx = (this.rockIdx + 1) % SHAPES.length;
	}

	getFingerprint() {
		// take top 20 rows...
		let result = `${this.rockIdx},${this.jetIdx}\n`;
		for (let y = this.grid.maxY; y >= this.grid.maxY - 20; y--) {
			for (let x = 0; x <= 7; ++x) {
				result += this.grid.get(new Point(x, y), ' ');
			}
			result += '\n';
		}
		return result;
	}

}

function solve(input: string, iterations: number) {
	const solver = new Solver(input);

	for (let i = 0; i < iterations; ++i) {
		solver.dropSingle();
	}

	return solver.grid.maxY + 1;
}


function findRepeats(input: string) {
	const solver = new Solver(input);

	const fingerprints = new Map<string, { index: number, height: number }>();

	for (let k = 0; k < 10000; ++k) {
		solver.dropSingle();

		const fp = solver.getFingerprint();
		const value = { index: k, height: solver.grid.maxY + 1 };
		if (fingerprints.has(fp)) {
			const other = fingerprints.get(fp);
			console.log(`Repeat found. DeltaIndex: ${value.index - other.index} DeltaHeight: ${value.height - other.height}`);
		}
		fingerprints.set(fp, value);
	}

}

function solve2(input: string, repeatingUnit: number, unitHeight: number) {
	
	const solver = new Solver(input);
	// first repeating Unit may be different...

	let remain = 1000000000000;

	// warm up phase...
	for (let k = 0; k < 1000; ++k) {
		solver.dropSingle();
		remain--;
	}

	// now skip a lot of repeating units...
	const skipUnits = Math.floor(remain / repeatingUnit);
	console.log(`Now at ${remain}. Skipping ${skipUnits} times ${repeatingUnit}`)
	remain -= (skipUnits * repeatingUnit);
	console.log(`Now at ${remain}`);

	// cool-down phase
	while (remain > 0) {
		solver.dropSingle();
		remain--;
	}

	return solver.grid.maxY + 1 + (skipUnits * unitHeight);
}

assert(solve(TEST_INPUT, 2022) === 3068, "Solution incorrect"); // expected
console.log(solve(INPUT, 2022));

// findRepeats(TEST_INPUT); // uncomment to figure out repeat parameters
assert(solve2(TEST_INPUT, 35, 53) === 1514285714288, "Solution part 2 incorrect");

// findRepeats(INPUT); // uncomment to figure out repeat parameters
console.log(solve2(INPUT, 1735, 2720));
// answer: 1567723342929