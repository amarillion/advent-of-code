#!/usr/bin/env -S java --class-path .. -ea --source 21 Solution
import common.Util;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class Solution {

	private static List<List<Integer>> parse(Path file) throws IOException {
		return Files.lines(file).map(
				l -> Arrays.stream(l.split(" ")).map(Integer::parseInt).toList()
		).toList();
	}

	private static List<Integer> takeDifferences(List<Integer> input) {
		List<Integer> result = new ArrayList<>();
		for (int i = 1; i < input.size(); ++i) {
			result.add(input.get(i) - input.get(i-1));
		}
		return result;
	}

	private static List<Integer> extrapolate(List<Integer> input, int start) {
		List<Integer> result = new ArrayList<>();
		int prev = start;
		result.add(prev);
		for (Integer val : input) {
			prev += val;
			result.add(prev);
		}
		return result;
	}

	/**
	 * Model derived from a list of integers, ready for extrapolation
	 * startValues go from bottom to top
	 * length is the Length of last row of the model
	*/
	private record Model(List<Integer> startValues, int length) {}

	private static Model deriveModel(List<Integer> data) {
		// first take differences
		List<Integer> current = data;
		List<Integer> startValues = new ArrayList<>();
		while (current.stream().anyMatch(i -> i != 0)) {
			startValues.add(current.get(0));
			current = takeDifferences(current);
		}
		Collections.reverse(startValues);
		return new Model(startValues, current.size());
	}

	private static long extrapolateRight(Model model) {
		List<Integer> current = new ArrayList<>(Collections.nCopies(model.length, 0));
		current.add(0);
		for (int startValue : model.startValues) {
			current = extrapolate(current, startValue);
		}
		return current.getLast();
	}

	private static long extrapolateLeft(Model model) {
		int result = 0;
		for (int startValue : model.startValues) {
			result = startValue - result;
		}
		return result;
	}

	private static long solve1(List<List<Integer>> data) {
		return data.stream().map(Solution::deriveModel).map(Solution::extrapolateRight).mapToLong(Long::valueOf).sum();
	}

	private static long solve2(List<List<Integer>> data) {
		return data.stream().map(Solution::deriveModel).map(Solution::extrapolateLeft).mapToLong(Long::valueOf).sum();
	}

	public static void main(String[] args) throws IOException {
		assert args.length == 2 : "Missing argument: input filename";
		var data = parse(Path.of(args[1]));
		System.out.println(solve1(data));
		System.out.println(solve2(data));
	}
}
